plugins {
	id "com.github.johnrengelman.shadow" version "7.1.2"
}

allprojects {
	archivesBaseName = "friendsandfoes-flowerymooblooms-quilt-mc${rootProject.minecraft_version}"
}

architectury {
	platformSetupLoomIde()
	loader("quilt")
}

loom {
	accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
	common
	shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentQuilt.extendsFrom common
}

dependencies {
	// Core dependencies
	modImplementation "org.quiltmc:quilt-loader:${rootProject.quilt_loader_version}"
	modApi "org.quiltmc.quilted-fabric-api:quilted-fabric-api:${rootProject.quilt_fabric_api_version}"

	implementation("com.github.LlamaLad7:MixinExtras:${rootProject.mixin_extras_version}")
	annotationProcessor("com.github.LlamaLad7:MixinExtras:${rootProject.mixin_extras_version}")
	include("com.github.LlamaLad7:MixinExtras:${rootProject.mixin_extras_version}")

	modRuntimeOnly "curse.maven:friendsandfoes-quilt-628248:4579632"

	common(project(path: ":common", configuration: "namedElements")) { transitive false }
	shadowCommon(project(path: ":common", configuration: "transformProductionQuilt")) { transitive false }
}

processResources {
	inputs.property "group", rootProject.maven_group
	inputs.property 'modId', rootProject.mod_id
	inputs.property 'modName', rootProject.mod_name
	inputs.property 'modDescription', rootProject.mod_description
	inputs.property 'modVersion', rootProject.mod_version
	inputs.property 'modAuthor', rootProject.mod_author

	filesMatching("quilt.mod.json") {
		expand([
			'group'         : rootProject.maven_group,
			'modId'         : rootProject.mod_id,
			'modName'       : rootProject.mod_name,
			'modDescription': rootProject.mod_description,
			'modVersion'    : rootProject.mod_version,
			'modAuthor'     : rootProject.mod_author
		])
	}
}

shadowJar {
	exclude "architectury.common.json"

	configurations = [project.configurations.shadowCommon]
	classifier "dev-shadow"
}

remapJar {
	injectAccessWidener = true
	input.set shadowJar.archiveFile
	dependsOn shadowJar
	classifier null
}

jar {
	classifier "dev"
}

sourcesJar {
	def commonSources = project(":common").sourcesJar
	dependsOn commonSources
	from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}

repositories {
	maven { url "https://maven.quiltmc.org/repository/release/" }

	maven { url "https://www.cursemaven.com" }
}