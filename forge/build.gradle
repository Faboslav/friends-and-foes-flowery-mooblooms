plugins {
	id "com.github.johnrengelman.shadow" version "8.1.1"
}

def modrinth(String name, String version) {
	return "maven.modrinth:$name:$version"
}

allprojects {
	archivesBaseName = "${mod_id}-forge-mc${minecraft_version}"
}

architectury {
	platformSetupLoomIde()
	forge()
}

configurations {
	common
	shadowCommon
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentForge.extendsFrom common
}

dependencies {
	forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"

	// Mixin extras (https://github.com/LlamaLad7/MixinExtras)
	implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:${mixin_extras_version}"))
	implementation(include("io.github.llamalad7:mixinextras-forge:${mixin_extras_version}"))

	modRuntimeOnly(modrinth("friends-and-foes-forge", "forge-mc${minecraft_version}-${friendsandfoes_version}"))

	common(project(path: ":common", configuration: "namedElements")) { transitive false }
	shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

shadowJar {
	exclude "fabric.mod.json"
	exclude "architectury.common.json"

	configurations = [project.configurations.shadowCommon]
	archiveClassifier.set("dev-shadow")
}

remapJar {
	inputFile.set shadowJar.archiveFile
	dependsOn shadowJar
	archiveClassifier.set(null)
}

jar {
	archiveClassifier.set("dev")
}

sourcesJar {
	def commonSources = project(":common").sourcesJar
	dependsOn commonSources
	from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}

repositories {
	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"

		content {
			includeGroup "maven.modrinth"
		}
	}
}